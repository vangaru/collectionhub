// <auto-generated />
using System;
using CollectionHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CollectionHub.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210815123655_OptionalFieldsFixes")]
    partial class OptionalFieldsFixes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("CollectionHub.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstOptionalBoolFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FirstOptionalBoolFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstOptionalDateTimeFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FirstOptionalDateTimeFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstOptionalNumberFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FirstOptionalNumberFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstOptionalStringFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FirstOptionalStringFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstOptionalTextFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FirstOptionalTextFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageStorageName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondOptionalBoolFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SecondOptionalBoolFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondOptionalDateTimeFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SecondOptionalDateTimeFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondOptionalNumberFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SecondOptionalNumberFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondOptionalStringFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SecondOptionalStringFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondOptionalTextFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SecondOptionalTextFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("ThirdOptionalBoolFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ThirdOptionalBoolFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThirdOptionalDateTimeFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ThirdOptionalDateTimeFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThirdOptionalNumberFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ThirdOptionalNumberFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThirdOptionalStringFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ThirdOptionalStringFieldVisible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThirdOptionalTextFieldName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ThirdOptionalTextFieldVisible")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("CollectionHub.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OptionalBoolField1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalBoolField2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalBoolField3Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalNumberField1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalNumberField2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalNumberField3Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalStringField1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalStringField2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalStringField3Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalTextField1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalTextField2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionalTextField3Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("OptionalBoolField1Id");

                    b.HasIndex("OptionalBoolField2Id");

                    b.HasIndex("OptionalBoolField3Id");

                    b.HasIndex("OptionalNumberField1Id");

                    b.HasIndex("OptionalNumberField2Id");

                    b.HasIndex("OptionalNumberField3Id");

                    b.HasIndex("OptionalStringField1Id");

                    b.HasIndex("OptionalStringField2Id");

                    b.HasIndex("OptionalStringField3Id");

                    b.HasIndex("OptionalTextField1Id");

                    b.HasIndex("OptionalTextField2Id");

                    b.HasIndex("OptionalTextField3Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CollectionHub.Models.OptionalBoolField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OptionalBoolFields");
                });

            modelBuilder.Entity("CollectionHub.Models.OptionalDateTimeField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OptionalDateTimeFields");
                });

            modelBuilder.Entity("CollectionHub.Models.OptionalNumberField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("OptionalNumberFields");
                });

            modelBuilder.Entity("CollectionHub.Models.OptionalStringField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OptionalStringFields");
                });

            modelBuilder.Entity("CollectionHub.Models.OptionalTextField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OptionalTextFields");
                });

            modelBuilder.Entity("CollectionHub.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CollectionHub.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("CollectionHub.Models.Collection", b =>
                {
                    b.HasOne("CollectionHub.Data.ApplicationUser", null)
                        .WithMany("Collections")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("CollectionHub.Models.Item", b =>
                {
                    b.HasOne("CollectionHub.Models.Collection", null)
                        .WithMany("Items")
                        .HasForeignKey("CollectionId");

                    b.HasOne("CollectionHub.Models.OptionalBoolField", "OptionalBoolField1")
                        .WithMany()
                        .HasForeignKey("OptionalBoolField1Id");

                    b.HasOne("CollectionHub.Models.OptionalBoolField", "OptionalBoolField2")
                        .WithMany()
                        .HasForeignKey("OptionalBoolField2Id");

                    b.HasOne("CollectionHub.Models.OptionalBoolField", "OptionalBoolField3")
                        .WithMany()
                        .HasForeignKey("OptionalBoolField3Id");

                    b.HasOne("CollectionHub.Models.OptionalNumberField", "OptionalNumberField1")
                        .WithMany()
                        .HasForeignKey("OptionalNumberField1Id");

                    b.HasOne("CollectionHub.Models.OptionalNumberField", "OptionalNumberField2")
                        .WithMany()
                        .HasForeignKey("OptionalNumberField2Id");

                    b.HasOne("CollectionHub.Models.OptionalNumberField", "OptionalNumberField3")
                        .WithMany()
                        .HasForeignKey("OptionalNumberField3Id");

                    b.HasOne("CollectionHub.Models.OptionalStringField", "OptionalStringField1")
                        .WithMany()
                        .HasForeignKey("OptionalStringField1Id");

                    b.HasOne("CollectionHub.Models.OptionalStringField", "OptionalStringField2")
                        .WithMany()
                        .HasForeignKey("OptionalStringField2Id");

                    b.HasOne("CollectionHub.Models.OptionalStringField", "OptionalStringField3")
                        .WithMany()
                        .HasForeignKey("OptionalStringField3Id");

                    b.HasOne("CollectionHub.Models.OptionalTextField", "OptionalTextField1")
                        .WithMany()
                        .HasForeignKey("OptionalTextField1Id");

                    b.HasOne("CollectionHub.Models.OptionalTextField", "OptionalTextField2")
                        .WithMany()
                        .HasForeignKey("OptionalTextField2Id");

                    b.HasOne("CollectionHub.Models.OptionalTextField", "OptionalTextField3")
                        .WithMany()
                        .HasForeignKey("OptionalTextField3Id");

                    b.Navigation("OptionalBoolField1");

                    b.Navigation("OptionalBoolField2");

                    b.Navigation("OptionalBoolField3");

                    b.Navigation("OptionalNumberField1");

                    b.Navigation("OptionalNumberField2");

                    b.Navigation("OptionalNumberField3");

                    b.Navigation("OptionalStringField1");

                    b.Navigation("OptionalStringField2");

                    b.Navigation("OptionalStringField3");

                    b.Navigation("OptionalTextField1");

                    b.Navigation("OptionalTextField2");

                    b.Navigation("OptionalTextField3");
                });

            modelBuilder.Entity("CollectionHub.Models.Tag", b =>
                {
                    b.HasOne("CollectionHub.Models.Item", null)
                        .WithMany("Tags")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollectionHub.Models.Collection", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CollectionHub.Models.Item", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CollectionHub.Data.ApplicationUser", b =>
                {
                    b.Navigation("Collections");
                });
#pragma warning restore 612, 618
        }
    }
}
